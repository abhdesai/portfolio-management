{"version":3,"file":"AlertingRule.0a0d067887fb5d7b1adb.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/RuleViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx"],"sourcesContent":["import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { withErrorBoundary } from '@grafana/ui';\nimport { SafeDynamicImport } from 'app/core/components/DynamicImports/SafeDynamicImport';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\n\nconst DetailViewV1 = SafeDynamicImport(() => import('./components/rule-viewer/RuleViewer.v1'));\nconst DetailViewV2 = SafeDynamicImport(() => import('./components/rule-viewer/v2/RuleViewer.v2'));\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{\n  id: string;\n  sourceName: string;\n}>;\n\nconst newAlertDetailView = Boolean(config.featureToggles.alertingDetailsViewV2) === true;\n\nconst RuleViewer = (props: RuleViewerProps): JSX.Element => (\n  <AlertingPageWrapper>\n    {newAlertDetailView ? <DetailViewV2 {...props} /> : <DetailViewV1 {...props} />}\n  </AlertingPageWrapper>\n);\n\nexport default withErrorBoundary(RuleViewer, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PropsWithChildren {\n  pageId?: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n  actions?: React.ReactNode;\n}\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, actions, isLoading }: AlertingPageWrapperProps) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId} actions={actions}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n"],"names":["DetailViewV1","DetailViewV2","newAlertDetailView","RuleViewer","props","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","styles","getStyles","selectedAlertmanager","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","Select","value","o","theme","NoAlertManagersAvailable","Alert","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","children","pageId","pageNav","actions","isLoading","Page","AlertmanagerPageWrapper","accessType","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match"],"sourceRoot":""}