{"version":3,"file":"8061.b0df30604dc5682d4dad.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleFolderPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/FolderAndGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/dag.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/InvalidIntervalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PropsWithChildren {\n  pageId?: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n  actions?: React.ReactNode;\n}\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, actions, isLoading }: AlertingPageWrapperProps) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId} actions={actions}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2, Stack } from '@grafana/ui';\nimport { OldFolderPicker, Props as FolderPickerProps } from 'app/core/components/Select/OldFolderPicker';\nimport { PermissionLevelString, SearchQueryType } from 'app/types';\n\nimport { FolderWarning, CustomAdd } from '../../../../../core/components/Select/OldFolderPicker';\n\nexport interface Folder {\n  title: string;\n  uid: string;\n}\n\nexport interface RuleFolderPickerProps extends Omit<FolderPickerProps, 'initialTitle' | 'initialFolderId'> {\n  value?: Folder;\n}\n\nconst SlashesWarning = () => {\n  const styles = useStyles2(getStyles);\n  const onClick = () => window.open('https://github.com/grafana/grafana/issues/42947', '_blank');\n  return (\n    <Stack gap={0.5}>\n      <div className={styles.slashNotAllowed}>Folders with &apos;/&apos; character are not allowed.</div>\n      <Tooltip placement=\"top\" content={'Link to the Github issue'} theme=\"info\">\n        <Icon name=\"info-circle\" size=\"xs\" className={styles.infoIcon} onClick={onClick} />\n      </Tooltip>\n    </Stack>\n  );\n};\n\nexport const containsSlashes = (str: string): boolean => str.indexOf('/') !== -1;\n\nexport function RuleFolderPicker(props: RuleFolderPickerProps) {\n  const { value } = props;\n  const warningCondition = (folderName: string) => containsSlashes(folderName);\n\n  const folderWarning: FolderWarning = {\n    warningCondition: warningCondition,\n    warningComponent: SlashesWarning,\n  };\n\n  const customAdd: CustomAdd = {\n    disallowValues: true,\n    isAllowedValue: (value) => !containsSlashes(value),\n  };\n\n  return (\n    <OldFolderPicker\n      showRoot={false}\n      rootName=\"\"\n      allowEmpty={true}\n      initialTitle={value?.title}\n      initialFolderUid={value?.uid}\n      searchQueryType={SearchQueryType.AlertFolder}\n      {...props}\n      permissionLevel={PermissionLevelString.Edit}\n      customAdd={customAdd}\n      folderWarning={folderWarning}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  slashNotAllowed: css`\n    color: ${theme.colors.warning.main};\n    font-size: 12px;\n    margin-bottom: 2px;\n  `,\n  infoIcon: css`\n    color: ${theme.colors.warning.main};\n    font-size: 12px;\n    margin-bottom: 2px;\n    cursor: pointer;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { debounce, take, uniqueId } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, useForm, useFormContext } from 'react-hook-form';\n\nimport { AppEvents, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  AsyncSelect,\n  Box,\n  Button,\n  Field,\n  Input,\n  InputControl,\n  Label,\n  Modal,\n  Stack,\n  Text,\n  useStyles2,\n} from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { createFolder } from 'app/features/manage-dashboards/state/actions';\nimport { AccessControlAction, useDispatch } from 'app/types';\nimport { CombinedRuleGroup } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { MINUTE } from '../../utils/rule-form';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { evaluateEveryValidationOptions } from '../rules/EditRuleGroupModal';\n\nimport { containsSlashes, Folder, RuleFolderPicker } from './RuleFolderPicker';\nimport { checkForPathSeparator } from './util';\n\nexport const MAX_GROUP_RESULTS = 1000;\n\nexport const useFolderGroupOptions = (folderTitle: string, enableProvisionedGroups: boolean) => {\n  const dispatch = useDispatch();\n\n  // fetch the ruler rules from the database so we can figure out what other \"groups\" are already defined\n  // for our folders\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n  }, [dispatch]);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const groupfoldersForGrafana = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME];\n\n  const grafanaFolders = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const folderGroups = grafanaFolders.find((f) => f.name === folderTitle)?.groups ?? [];\n\n  const groupOptions = folderGroups\n    .map<SelectableValue<string>>((group) => {\n      const isProvisioned = isProvisionedGroup(group);\n      return {\n        label: group.name,\n        value: group.name,\n        description: group.interval ?? MINUTE,\n        // we include provisioned folders, but disable the option to select them\n        isDisabled: !enableProvisionedGroups ? isProvisioned : false,\n        isProvisioned: isProvisioned,\n      };\n    })\n\n    .sort(sortByLabel);\n\n  return { groupOptions, loading: groupfoldersForGrafana?.loading };\n};\n\nconst isProvisionedGroup = (group: CombinedRuleGroup) => {\n  return group.rules.some(\n    (rule) => isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance) === true\n  );\n};\n\nconst sortByLabel = (a: SelectableValue<string>, b: SelectableValue<string>) => {\n  return a.label?.localeCompare(b.label ?? '') || 0;\n};\n\nconst findGroupMatchingLabel = (group: SelectableValue<string>, query: string) => {\n  return group.label?.toLowerCase().includes(query.toLowerCase());\n};\n\nexport function FolderAndGroup({\n  groupfoldersForGrafana,\n  enableProvisionedGroups,\n}: {\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n  enableProvisionedGroups: boolean;\n}) {\n  const {\n    formState: { errors },\n    watch,\n    setValue,\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n\n  const folder = watch('folder');\n  const group = watch('group');\n\n  const { groupOptions, loading } = useFolderGroupOptions(folder?.title ?? '', enableProvisionedGroups);\n\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [isCreatingEvaluationGroup, setIsCreatingEvaluationGroup] = useState(false);\n\n  const onOpenFolderCreationModal = () => setIsCreatingFolder(true);\n  const onOpenEvaluationGroupCreationModal = () => setIsCreatingEvaluationGroup(true);\n\n  const handleFolderCreation = (folder: Folder) => {\n    resetGroup();\n    setValue('folder', folder);\n    setIsCreatingFolder(false);\n  };\n\n  const handleEvalGroupCreation = (groupName: string, evaluationInterval: string) => {\n    setValue('group', groupName);\n    setValue('evaluateEvery', evaluationInterval);\n    setIsCreatingEvaluationGroup(false);\n  };\n\n  const resetGroup = useCallback(() => {\n    setValue('group', '');\n  }, [setValue]);\n\n  const getOptions = useCallback(\n    async (query: string) => {\n      const results = query ? groupOptions.filter((group) => findGroupMatchingLabel(group, query)) : groupOptions;\n      return take(results, MAX_GROUP_RESULTS);\n    },\n    [groupOptions]\n  );\n\n  const debouncedSearch = useMemo(() => {\n    return debounce(getOptions, 300, { leading: true });\n  }, [getOptions]);\n\n  const defaultGroupValue = group ? { value: group, label: group } : undefined;\n\n  return (\n    <div className={styles.container}>\n      <Stack alignItems=\"center\">\n        <Field\n          label={\n            <Label htmlFor=\"folder\" description={'Select a folder to store your rule.'}>\n              Folder\n            </Label>\n          }\n          className={styles.formInput}\n          error={errors.folder?.message}\n          invalid={!!errors.folder?.message}\n          data-testid=\"folder-picker\"\n        >\n          {(!isCreatingFolder && (\n            <InputControl\n              render={({ field: { ref, ...field } }) => (\n                <div style={{ width: 420 }}>\n                  <RuleFolderPicker\n                    inputId=\"folder\"\n                    {...field}\n                    enableReset={true}\n                    onChange={({ title, uid }) => {\n                      field.onChange({ title, uid });\n                      resetGroup();\n                    }}\n                  />\n                </div>\n              )}\n              name=\"folder\"\n              rules={{\n                required: { value: true, message: 'Select a folder' },\n                validate: {\n                  pathSeparator: (folder: Folder) => checkForPathSeparator(folder.title),\n                },\n              }}\n            />\n          )) || <div>Creating new folder...</div>}\n        </Field>\n        <Box marginTop={2.5} gap={1} display={'flex'} alignItems={'center'}>\n          <Text color=\"secondary\">or</Text>\n          <Button\n            onClick={onOpenFolderCreationModal}\n            type=\"button\"\n            icon=\"plus\"\n            fill=\"outline\"\n            variant=\"secondary\"\n            disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n          >\n            New folder\n          </Button>\n        </Box>\n      </Stack>\n\n      {isCreatingFolder && (\n        <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n      )}\n\n      <Stack alignItems=\"center\">\n        <div style={{ width: 420 }}>\n          <Field\n            label=\"Evaluation group\"\n            data-testid=\"group-picker\"\n            description=\"Rules within the same group are evaluated concurrently over the same time interval.\"\n            className={styles.formInput}\n            error={errors.group?.message}\n            invalid={!!errors.group?.message}\n          >\n            <InputControl\n              render={({ field: { ref, ...field }, fieldState }) => (\n                <AsyncSelect\n                  disabled={!folder || loading}\n                  inputId=\"group\"\n                  key={uniqueId()}\n                  {...field}\n                  onChange={(group) => {\n                    field.onChange(group.label ?? '');\n                  }}\n                  isLoading={loading}\n                  invalid={Boolean(folder) && !group && Boolean(fieldState.error)}\n                  loadOptions={debouncedSearch}\n                  cacheOptions\n                  loadingMessage={'Loading groups...'}\n                  defaultValue={defaultGroupValue}\n                  defaultOptions={groupOptions}\n                  getOptionLabel={(option: SelectableValue<string>) => (\n                    <div>\n                      <span>{option.label}</span>\n                      {option['isProvisioned'] && (\n                        <>\n                          {' '}\n                          <ProvisioningBadge />\n                        </>\n                      )}\n                    </div>\n                  )}\n                  placeholder={'Select an evaluation group...'}\n                />\n              )}\n              name=\"group\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Must enter a group name' },\n                validate: {\n                  pathSeparator: (group_: string) => checkForPathSeparator(group_),\n                },\n              }}\n            />\n          </Field>\n        </div>\n        <Box marginTop={4} gap={1} display={'flex'} alignItems={'center'}>\n          <Text color=\"secondary\">or</Text>\n          <Button\n            onClick={onOpenEvaluationGroupCreationModal}\n            type=\"button\"\n            icon=\"plus\"\n            fill=\"outline\"\n            variant=\"secondary\"\n            disabled={!folder}\n          >\n            New evaluation group\n          </Button>\n        </Box>\n        {isCreatingEvaluationGroup && (\n          <EvaluationGroupCreationModal\n            onCreate={handleEvalGroupCreation}\n            onClose={() => setIsCreatingEvaluationGroup(false)}\n            groupfoldersForGrafana={groupfoldersForGrafana}\n          />\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n\n  const [title, setTitle] = useState('');\n  const onSubmit = async () => {\n    const newFolder = await createFolder({ title: title });\n    if (!newFolder.uid) {\n      appEvents.emit(AppEvents.alertError, ['Folder could not be created']);\n      return;\n    }\n\n    const folder: Folder = { title: newFolder.title, uid: newFolder.uid };\n    onCreate(folder);\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n  };\n\n  const error = containsSlashes(title);\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={'New folder'} onDismiss={onClose} onClickBackdrop={onClose}>\n      <div className={styles.modalTitle}>Create a new folder to store your rule</div>\n\n      <form onSubmit={onSubmit}>\n        <Field\n          label={<Label htmlFor=\"folder\">Folder name</Label>}\n          error={\"The folder name can't contain slashes\"}\n          invalid={error}\n        >\n          <Input\n            autoFocus={true}\n            id=\"folderName\"\n            placeholder=\"Enter a name\"\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            className={styles.formInput}\n          />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={!title || error}>\n            Create\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n}\n\nfunction EvaluationGroupCreationModal({\n  onClose,\n  onCreate,\n  groupfoldersForGrafana,\n}: {\n  onClose: () => void;\n  onCreate: (group: string, evaluationInterval: string) => void;\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const onSubmit = () => {\n    onCreate(getValues('group'), getValues('evaluateEvery'));\n  };\n\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const [groupName, folderName] = watch(['group', 'folder.title']);\n\n  const groupRules =\n    (groupfoldersForGrafana && groupfoldersForGrafana[folderName]?.find((g) => g.name === groupName)?.rules) ?? [];\n\n  const onCancel = () => {\n    onClose();\n  };\n\n  const formAPI = useForm({\n    defaultValues: { group: '', evaluateEvery: '' },\n    mode: 'onChange',\n    shouldFocusError: true,\n  });\n\n  const { register, handleSubmit, formState, getValues } = formAPI;\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={'New evaluation group'}\n      onDismiss={onCancel}\n      onClickBackdrop={onCancel}\n    >\n      <div className={styles.modalTitle}>Create a new evaluation group to use for this alert rule.</div>\n\n      <FormProvider {...formAPI}>\n        <form onSubmit={handleSubmit(() => onSubmit())}>\n          <Field\n            label={<Label htmlFor={'group'}>Evaluation group name</Label>}\n            error={formState.errors.group?.message}\n            invalid={!!formState.errors.group}\n          >\n            <Input\n              className={styles.formInput}\n              autoFocus={true}\n              id={'group'}\n              placeholder=\"Enter a name\"\n              {...register('group', { required: { value: true, message: 'Required.' } })}\n            />\n          </Field>\n\n          <Field\n            error={formState.errors.evaluateEvery?.message}\n            invalid={!!formState.errors.evaluateEvery}\n            label={\n              <Label\n                htmlFor={evaluateEveryId}\n                description=\"How often is the rule evaluated. Applies to every rule within the group.\"\n              >\n                Evaluation interval\n              </Label>\n            }\n          >\n            <Input\n              className={styles.formInput}\n              id={evaluateEveryId}\n              placeholder=\"e.g. 5m\"\n              {...register('evaluateEvery', evaluateEveryValidationOptions(groupRules))}\n            />\n          </Field>\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" type=\"button\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={!formState.isValid}>\n              Create\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-direction: column;\n    align-items: baseline;\n    max-width: ${theme.breakpoints.values.lg}px;\n    justify-content: space-between;\n  `,\n  formInput: css`\n    flex-grow: 1;\n  `,\n  modal: css`\n    width: ${theme.breakpoints.values.sm}px;\n  `,\n  modalTitle: css`\n    color: ${theme.colors.text.secondary};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React, { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n];\n\nexport const GrafanaAlertStatePicker = ({ includeNoData, includeError, ...props }: Props) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { RegisterOptions, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  Field,\n  Icon,\n  IconButton,\n  Input,\n  InputControl,\n  Label,\n  Stack,\n  Switch,\n  Text,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { logInfo, LogMessages } from '../../Analytics';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { parsePrometheusDuration } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { EditCloudGroupModal } from '../rules/EditRuleGroupModal';\n\nimport { FolderAndGroup, useFolderGroupOptions } from './FolderAndGroup';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions = (evaluateEvery: string): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value: string) => {\n    // parsePrometheusDuration does not allow 0 but does allow 0s\n    if (value === '0') {\n      return true;\n    }\n\n    try {\n      const millisFor = parsePrometheusDuration(value);\n\n      // 0 is a special value meaning for equals evaluation interval\n      if (millisFor === 0) {\n        return true;\n      }\n\n      try {\n        const millisEvery = parsePrometheusDuration(evaluateEvery);\n        return millisFor >= millisEvery\n          ? true\n          : 'For duration must be greater than or equal to the evaluation interval.';\n      } catch (err) {\n        // if we fail to parse \"every\", assume validation is successful, or the error messages\n        // will overlap in the UI\n        return true;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nconst useIsNewGroup = (folder: string, group: string) => {\n  const { groupOptions } = useFolderGroupOptions(folder, false);\n\n  const groupIsInGroupOptions = useCallback(\n    (group_: string) => groupOptions.some((groupInList: SelectableValue<string>) => groupInList.label === group_),\n    [groupOptions]\n  );\n  return !groupIsInGroupOptions(group);\n};\n\nfunction FolderGroupAndEvaluationInterval({\n  evaluateEvery,\n  setEvaluateEvery,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const { watch, setValue, getValues } = useFormContext<RuleFormValues>();\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n\n  const [groupName, folderName] = watch(['group', 'folder.title']);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const groupfoldersForGrafana = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME];\n\n  const grafanaNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const existingNamespace = grafanaNamespaces.find((ns) => ns.name === folderName);\n  const existingGroup = existingNamespace?.groups.find((g) => g.name === groupName);\n\n  const isNewGroup = useIsNewGroup(folderName ?? '', groupName);\n\n  useEffect(() => {\n    if (!isNewGroup && existingGroup?.interval) {\n      setEvaluateEvery(existingGroup.interval);\n    }\n  }, [setEvaluateEvery, isNewGroup, setValue, existingGroup]);\n\n  const closeEditGroupModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  const onOpenEditGroupModal = () => setIsEditingGroup(true);\n\n  const editGroupDisabled = groupfoldersForGrafana?.loading || isNewGroup || !folderName || !groupName;\n\n  const emptyNamespace: CombinedRuleNamespace = {\n    name: folderName,\n    rulesSource: GRAFANA_RULES_SOURCE_NAME,\n    groups: [],\n  };\n  const emptyGroup: CombinedRuleGroup = { name: groupName, interval: evaluateEvery, rules: [], totals: {} };\n\n  return (\n    <div>\n      <FolderAndGroup\n        groupfoldersForGrafana={groupfoldersForGrafana?.result}\n        enableProvisionedGroups={enableProvisionedGroups}\n      />\n      {folderName && isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={existingNamespace ?? emptyNamespace}\n          group={existingGroup ?? emptyGroup}\n          onClose={() => closeEditGroupModal()}\n          intervalEditOnly\n          hideFolder={true}\n        />\n      )}\n      {folderName && groupName && (\n        <div className={styles.evaluationContainer}>\n          <Stack direction=\"column\" gap={0}>\n            <div className={styles.marginTop}>\n              <Stack direction=\"column\" gap={1}>\n                {getValues('group') && getValues('evaluateEvery') && (\n                  <span>\n                    All rules in the selected group are evaluated every {evaluateEvery}.{' '}\n                    {!isNewGroup && (\n                      <IconButton\n                        name=\"pen\"\n                        aria-label=\"Edit\"\n                        disabled={editGroupDisabled}\n                        onClick={onOpenEditGroupModal}\n                      />\n                    )}\n                  </span>\n                )}\n              </Stack>\n            </div>\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ForInput({ evaluateEvery }: { evaluateEvery: string }) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateForId = 'eval-for-input';\n\n  return (\n    <Stack direction=\"row\" justify-content=\"flex-start\" align-items=\"flex-start\">\n      <Field\n        label={\n          <Label\n            htmlFor=\"evaluateFor\"\n            description=\"Period in which an alert rule can be in breach of the condition until the alert rule fires.\"\n          >\n            Pending period\n          </Label>\n        }\n        className={styles.inlineField}\n        error={errors.evaluateFor?.message}\n        invalid={!!errors.evaluateFor?.message}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions(evaluateEvery))} />\n      </Field>\n    </Stack>\n  );\n}\n\nfunction getDescription() {\n  const docsLink = 'https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/rule-evaluation/';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"baseline\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Define how the alert rule is evaluated.\n      </Text>\n      <NeedHelpInfo\n        contentText=\"Evaluation groups are containers for evaluating alert and recording rules. An evaluation group defines an evaluation interval - how often a rule is checked. Alert rules within the same evaluation group are evaluated sequentially\"\n        externalLink={docsLink}\n        linkText={`Read about evaluation`}\n        title=\"Evaluation\"\n      />\n    </Stack>\n  );\n}\n\nexport function GrafanaEvaluationBehavior({\n  evaluateEvery,\n  setEvaluateEvery,\n  existing,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  existing: boolean;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n\n  const isPaused = watch('isPaused');\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection stepNo={3} title=\"Set evaluation behavior\" description={getDescription()}>\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <FolderGroupAndEvaluationInterval\n          setEvaluateEvery={setEvaluateEvery}\n          evaluateEvery={evaluateEvery}\n          enableProvisionedGroups={enableProvisionedGroups}\n        />\n        <ForInput evaluateEvery={evaluateEvery} />\n\n        {existing && (\n          <Field htmlFor=\"pause-alert-switch\">\n            <InputControl\n              render={() => (\n                <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                  <Switch\n                    id=\"pause-alert\"\n                    onChange={(value) => {\n                      setValue('isPaused', value.currentTarget.checked);\n                    }}\n                    value={Boolean(isPaused)}\n                  />\n                  <label htmlFor=\"pause-alert\" className={styles.switchLabel}>\n                    Pause evaluation\n                    <Tooltip placement=\"top\" content=\"Turn on to pause evaluation for this alert rule.\" theme={'info'}>\n                      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n                    </Tooltip>\n                  </label>\n                </Stack>\n              )}\n              name=\"isPaused\"\n            />\n          </Field>\n        )}\n      </Stack>\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n      />\n      {showErrorHandling && (\n        <>\n          <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"no-data-state-input\"\n                  width={42}\n                  includeNoData={true}\n                  includeError={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"exec-err-state-input\"\n                  width={42}\n                  includeNoData={false}\n                  includeError={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n    </RuleEditorSection>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  evaluateLabel: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  evaluationContainer: css`\n    color: ${theme.colors.text.secondary};\n    max-width: ${theme.breakpoints.values.sm}px;\n    font-size: ${theme.typography.size.sm};\n  `,\n  intervalChangedLabel: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  warningIcon: css`\n    justify-self: center;\n    margin-right: ${theme.spacing(1)};\n    color: ${theme.colors.warning.text};\n  `,\n  infoIcon: css`\n    margin-left: 10px;\n  `,\n  warningMessage: css`\n    color: ${theme.colors.warning.text};\n  `,\n  bold: css`\n    font-weight: bold;\n  `,\n  alignInterval: css`\n    margin-top: ${theme.spacing(1)};\n    margin-left: -${theme.spacing(1)};\n  `,\n  marginTop: css`\n    margin-top: ${theme.spacing(1)};\n  `,\n  switchLabel: css(`\n    color: ${theme.colors.text.primary},\n    cursor: 'pointer',\n    fontSize: ${theme.typography.bodySmall.fontSize},\n  `),\n});\n","import { compact, memoize, uniq } from 'lodash';\nimport memoizeOne from 'memoize-one';\n\nimport { Edge, Graph, Node } from 'app/core/utils/dag';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\n// memoized version of _createDagFromQueries to prevent recreating the DAG if no sources or targets are modified\nexport const createDagFromQueries = memoizeOne(\n  _createDagFromQueries,\n  (previous: Parameters<typeof _createDagFromQueries>, next: Parameters<typeof _createDagFromQueries>) => {\n    return fingerPrintQueries(previous[0]) === fingerPrintQueries(next[0]);\n  }\n);\n\n/**\n * Turn the array of alert queries (this means data queries and expressions)\n * in to a DAG, a directed acyclical graph\n */\nexport function _createDagFromQueries(queries: AlertQuery[]): Graph {\n  const graph = new Graph();\n\n  const nodes = queries.map((query) => query.refId);\n  graph.createNodes(nodes);\n\n  queries.forEach((query) => {\n    const source = query.refId;\n    const isMathExpression = isExpressionQuery(query.model) && query.model.type === 'math';\n\n    // some expressions have multiple targets (like the math expression)\n    const targets = isMathExpression\n      ? parseRefsFromMathExpression(query.model.expression ?? '')\n      : [query.model.expression];\n\n    targets.forEach((target) => {\n      const isSelf = source === target;\n\n      if (source && target && !isSelf) {\n        graph.link(target, source);\n      }\n    });\n  });\n\n  return graph;\n}\n\n/**\n * parse an expression like \"$A > $B\" or \"${FOO BAR} > 0\" to an array of refIds\n */\nexport function parseRefsFromMathExpression(input: string): string[] {\n  // we'll use two regular expressions, one for \"${var}\" and one for \"$var\"\n  const r1 = new RegExp(/\\$\\{(?<var>[a-zA-Z0-9_ ]+?)\\}/gm);\n  const r2 = new RegExp(/\\$(?<var>[a-zA-Z0-9_]+)/gm);\n\n  const m1 = Array.from(input.matchAll(r1)).map((m) => m.groups?.var);\n  const m2 = Array.from(input.matchAll(r2)).map((m) => m.groups?.var);\n\n  return compact(uniq([...m1, ...m2]));\n}\n\nexport const getOriginOfRefId = memoize(_getOriginsOfRefId, (refId, graph) => refId + fingerprintGraph(graph));\n\nexport function _getOriginsOfRefId(refId: string, graph: Graph): string[] {\n  const node = graph.getNode(refId);\n\n  let origins: Node[] = [];\n\n  // recurse through \"node > inputEdges > inputNode\"\n  function findChildNode(node: Node) {\n    const inputEdges = node.inputEdges;\n\n    if (inputEdges.length > 0) {\n      inputEdges.forEach((edge) => {\n        if (edge.inputNode) {\n          findChildNode(edge.inputNode);\n        }\n      });\n    } else {\n      origins?.push(node);\n    }\n  }\n\n  findChildNode(node);\n\n  return origins.map((origin) => origin.name);\n}\n\n// create a unique fingerprint of the DAG\nexport function fingerprintGraph(graph: Graph) {\n  return Object.keys(graph.nodes)\n    .map((name) => {\n      const n = graph.nodes[name];\n      let outputEdges = n.outputEdges.map((e: Edge) => e.outputNode?.name).join(', ');\n      let inputEdges = n.inputEdges.map((e: Edge) => e.inputNode?.name).join(', ');\n      return `${n.name}:${outputEdges}:${inputEdges}`;\n    })\n    .join(' ');\n}\n\n// create a unique fingerprint of the array of queries\nexport function fingerPrintQueries(queries: AlertQuery[]) {\n  return queries\n    .map((query) => {\n      const type = isExpressionQuery(query.model) ? query.model.type : query.queryType;\n      return query.refId + (query.model.expression ?? '') + type;\n    })\n    .join();\n}\n","import { xor } from 'lodash';\nimport { ValidateResult } from 'react-hook-form';\n\nimport {\n  DataFrame,\n  isTimeSeriesFrames,\n  LoadingState,\n  PanelData,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { GraphTresholdsStyleMode } from '@grafana/schema';\nimport { config } from 'app/core/config';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ClassicCondition, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from '../../types/rule-form';\n\nimport { createDagFromQueries, getOriginOfRefId } from './dag';\n\nexport function queriesWithUpdatedReferences(\n  queries: AlertQuery[],\n  previousRefId: string,\n  newRefId: string\n): AlertQuery[] {\n  return queries.map((query) => {\n    if (previousRefId === newRefId) {\n      return query;\n    }\n\n    if (!isExpressionQuery(query.model)) {\n      return query;\n    }\n\n    const isMathExpression = query.model.type === 'math';\n    const isReduceExpression = query.model.type === 'reduce';\n    const isResampleExpression = query.model.type === 'resample';\n    const isClassicExpression = query.model.type === 'classic_conditions';\n    const isThresholdExpression = query.model.type === 'threshold';\n\n    if (isMathExpression) {\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: updateMathExpressionRefs(query.model.expression ?? '', previousRefId, newRefId),\n        },\n      };\n    }\n\n    if (isResampleExpression || isReduceExpression || isThresholdExpression) {\n      const isReferencing = query.model.expression === previousRefId;\n\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: isReferencing ? newRefId : query.model.expression,\n        },\n      };\n    }\n\n    if (isClassicExpression) {\n      const conditions = query.model.conditions?.map((condition) => ({\n        ...condition,\n        query: {\n          ...condition.query,\n          params: condition.query.params.map((param: string) => (param === previousRefId ? newRefId : param)),\n        },\n      }));\n\n      return { ...query, model: { ...query.model, conditions } };\n    }\n\n    return query;\n  });\n}\n\nexport function updateMathExpressionRefs(expression: string, previousRefId: string, newRefId: string): string {\n  const oldExpression = new RegExp('(\\\\$' + previousRefId + '\\\\b)|(\\\\${' + previousRefId + '})', 'gm');\n  const newExpression = '${' + newRefId + '}';\n\n  return expression.replace(oldExpression, newExpression);\n}\n\nexport function refIdExists(queries: AlertQuery[], refId: string | null): boolean {\n  return queries.find((query) => query.refId === refId) !== undefined;\n}\n\n// some gateways (like Istio) will decode \"/\" and \"\\\" characters – this will cause 404 errors for any API call\n// that includes these values in the URL (ie. /my/path%2fto/resource -> /my/path/to/resource)\n//\n// see https://istio.io/latest/docs/ops/best-practices/security/#customize-your-system-on-path-normalization\nexport function checkForPathSeparator(value: string): ValidateResult {\n  const containsPathSeparator = value.includes('/') || value.includes('\\\\');\n  if (containsPathSeparator) {\n    return 'Cannot contain \"/\" or \"\\\\\" characters';\n  }\n\n  return true;\n}\n\n// this function assumes we've already checked if the data passed in to the function is of the alert condition\nexport function errorFromCurrentCondition(data: PanelData): Error | undefined {\n  if (data.series.length === 0) {\n    return;\n  }\n\n  const isTimeSeriesResults = isTimeSeriesFrames(data.series);\n\n  let error;\n  if (isTimeSeriesResults) {\n    error = new Error('You cannot use time series data as an alert condition, consider adding a reduce expression.');\n  }\n\n  return error;\n}\n\nexport function errorFromPreviewData(data: PanelData): Error | undefined {\n  // give preference to QueryErrors\n  if (data.errors?.length) {\n    return new Error(data.errors[0].message);\n  }\n\n  return;\n}\n\nexport function warningFromSeries(series: DataFrame[]): Error | undefined {\n  const notices = series[0]?.meta?.notices ?? [];\n  const warning = notices.find((notice) => notice.severity === 'warning')?.text;\n\n  return warning ? new Error(warning) : undefined;\n}\n\nexport type ThresholdDefinition = {\n  config: ThresholdsConfig;\n  mode: GraphTresholdsStyleMode;\n};\n\nexport type ThresholdDefinitions = Record<string, ThresholdDefinition>;\n\n/**\n * This function will retrieve threshold definitions for the given array of data and expression queries.\n */\nexport function getThresholdsForQueries(queries: AlertQuery[]) {\n  const thresholds: ThresholdDefinitions = {};\n  const SUPPORTED_EXPRESSION_TYPES = [ExpressionQueryType.threshold, ExpressionQueryType.classic];\n\n  for (const query of queries) {\n    if (!isExpressionQuery(query.model)) {\n      continue;\n    }\n\n    // currently only supporting \"threshold\" & \"classic_condition\" expressions\n    if (!SUPPORTED_EXPRESSION_TYPES.includes(query.model.type)) {\n      continue;\n    }\n\n    if (!Array.isArray(query.model.conditions)) {\n      continue;\n    }\n\n    // if any of the conditions are a \"range\" we switch to an \"area\" threshold view and ignore single threshold values\n    // the time series panel does not support both.\n    const hasRangeThreshold = query.model.conditions.some(isRangeCondition);\n\n    query.model.conditions.forEach((condition) => {\n      const threshold = condition.evaluator.params;\n\n      // \"classic_conditions\" use `condition.query.params[]` and \"threshold\" uses `query.model.expression`\n      const refId = condition.query?.params[0] ?? query.model.expression;\n\n      // if an expression hasn't been linked to a data query yet, it won't have a refId\n      if (!refId) {\n        return;\n      }\n\n      const isRangeThreshold = isRangeCondition(condition);\n\n      try {\n        // create a DAG so we can find the origin of the current expression\n        const graph = createDagFromQueries(queries);\n\n        const originRefIDs = getOriginOfRefId(refId, graph);\n        const originQueries = queries.filter((query) => originRefIDs.includes(query.refId));\n\n        originQueries.forEach((originQuery) => {\n          const originRefID = originQuery.refId;\n\n          // check if the origin is a data query\n          const originIsDataQuery = !isExpressionQuery(originQuery?.model);\n\n          // if yes, add threshold config to the refId of the data Query\n          const hasValidOrigin = Boolean(originIsDataQuery && originRefID);\n\n          // create the initial data structure for this origin refId\n          if (originRefID && !thresholds[originRefID]) {\n            thresholds[originRefID] = {\n              config: {\n                mode: ThresholdsMode.Absolute,\n                steps: [],\n              },\n              mode: GraphTresholdsStyleMode.Line,\n            };\n          }\n\n          if (originRefID && hasValidOrigin && !isRangeThreshold && !hasRangeThreshold) {\n            appendSingleThreshold(originRefID, threshold[0]);\n          } else if (originRefID && hasValidOrigin && isRangeThreshold) {\n            appendRangeThreshold(originRefID, threshold, condition.evaluator.type);\n            thresholds[originRefID].mode = GraphTresholdsStyleMode.LineAndArea;\n          }\n        });\n      } catch (err) {\n        console.error('Failed to parse thresholds', err);\n        return;\n      }\n    });\n  }\n\n  function appendSingleThreshold(refId: string, value: number): void {\n    thresholds[refId].config.steps.push(\n      ...[\n        {\n          value: -Infinity,\n          color: 'transparent',\n        },\n        {\n          value: value,\n          color: config.theme2.colors.error.main,\n        },\n      ]\n    );\n  }\n\n  function appendRangeThreshold(refId: string, values: number[], type: EvalFunction): void {\n    if (type === EvalFunction.IsWithinRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: 'transparent',\n          },\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[1],\n            color: 'transparent',\n          },\n        ]\n      );\n    }\n\n    if (type === EvalFunction.IsOutsideRange) {\n      thresholds[refId].config.steps.push(\n        ...[\n          {\n            value: -Infinity,\n            color: config.theme2.colors.error.main,\n          },\n          // we have to duplicate this value, or the graph will not display the handle in the right color\n          {\n            value: values[0],\n            color: config.theme2.colors.error.main,\n          },\n          {\n            value: values[0],\n            color: 'transparent',\n          },\n          {\n            value: values[1],\n            color: config.theme2.colors.error.main,\n          },\n        ]\n      );\n    }\n\n    // now also sort the threshold values, if we don't then they will look weird in the time series panel\n    // TODO this doesn't work for negative values for now, those need to be sorted inverse\n    thresholds[refId].config.steps.sort((a, b) => a.value - b.value);\n\n    // also make sure we remove any \"undefined\" values from our steps in case the threshold config is incomplete\n    thresholds[refId].config.steps = thresholds[refId].config.steps.filter((step) => step.value !== undefined);\n  }\n\n  return thresholds;\n}\n\nfunction isRangeCondition(condition: ClassicCondition) {\n  return (\n    condition.evaluator.type === EvalFunction.IsWithinRange || condition.evaluator.type === EvalFunction.IsOutsideRange\n  );\n}\n\nexport function getStatusMessage(data: PanelData): string | undefined {\n  const genericErrorMessage = 'Failed to fetch data';\n  if (data.state !== LoadingState.Error) {\n    return;\n  }\n\n  const errors = data.errors;\n  if (errors?.length) {\n    return errors.map((error) => error.message ?? genericErrorMessage).join(', ');\n  }\n\n  return data.error?.message ?? genericErrorMessage;\n}\n\nexport function translateRouteParamToRuleType(param = ''): RuleFormType {\n  if (param === 'recording') {\n    return RuleFormType.cloudRecording;\n  }\n\n  return RuleFormType.grafana;\n}\n\n/**\n * This function finds what refIds have been updated given the previous Array of queries and an Array of updated data queries.\n * All expression queries are discarded from the arrays, since we have separate handlers for those (see \"onUpdateRefId\") of the ExpressionEditor\n *\n * This code assumes not more than 1 query refId has changed per \"onChangeQueries\",\n */\nexport function findRenamedDataQueryReferences(\n  previousQueries: AlertQuery[],\n  updatedQueries: AlertQuery[]\n): [string, string] {\n  const updatedDataQueries = updatedQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n  const previousDataQueries = previousQueries\n    .filter((query) => !isExpressionQuery(query.model))\n    .map((query) => query.refId);\n\n  // given the following two arrays\n  // ['A', 'B', 'C'] and ['FOO', 'B' 'C']\n  // the \"xor\" function will return ['A', 'FOO'] because those are not in both arrays\n  const [oldRefId, newRefId] = xor(previousDataQueries, updatedDataQueries);\n\n  return [oldRefId, newRefId];\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nconst EvaluationIntervalLimitExceeded = () => (\n  <Alert severity=\"warning\" title=\"Global evalutation interval limit exceeded\">\n    A minimum evaluation interval of <strong>{config.unifiedAlerting.minInterval}</strong> has been configured in\n    Grafana.\n    <br />\n    Please contact the administrator to configure a lower interval.\n  </Alert>\n);\n\nexport { EvaluationIntervalLimitExceeded };\n","import { css } from '@emotion/css';\nimport { compact } from 'lodash';\nimport React, { useEffect, useMemo } from 'react';\nimport { FormProvider, RegisterOptions, useForm, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, Field, Input, Label, LinkButton, Modal, useStyles2, Stack } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { rulesInSameGroupHaveInvalidFor, updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\nimport { getRulesSourceName, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertInfo, getAlertInfo, isRecordingRulerRule } from '../../utils/rules';\nimport { parsePrometheusDuration, safeParseDurationstr } from '../../utils/time';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EvaluationIntervalLimitExceeded } from '../InvalidIntervalWarning';\nimport { MIN_TIME_RANGE_STEP_S } from '../rule-editor/GrafanaEvaluationBehavior';\n\nconst ITEMS_PER_PAGE = 10;\n\nfunction ForBadge({ message, error }: { message: string; error?: boolean }) {\n  if (error) {\n    return <Badge color=\"red\" icon=\"exclamation-circle\" text={'Error'} tooltip={message} />;\n  } else {\n    return <Badge color=\"orange\" icon=\"exclamation-triangle\" text={'Unknown'} tooltip={message} />;\n  }\n}\n\nconst isValidEvaluation = (evaluation: string) => {\n  try {\n    const duration = parsePrometheusDuration(evaluation);\n\n    if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n      return false;\n    }\n\n    if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\ntype AlertsWithForTableColumnProps = DynamicTableColumnProps<AlertInfo>;\ntype AlertsWithForTableProps = DynamicTableItemProps<AlertInfo>;\n\nexport const RulesForGroupTable = ({ rulesWithoutRecordingRules }: { rulesWithoutRecordingRules: RulerRuleDTO[] }) => {\n  const styles = useStyles2(getStyles);\n\n  const { watch } = useFormContext<FormValues>();\n  const currentInterval = watch('groupInterval');\n  const unknownCurrentInterval = !Boolean(currentInterval);\n\n  const rows: AlertsWithForTableProps[] = rulesWithoutRecordingRules\n    .slice()\n    .map((rule: RulerRuleDTO, index) => ({\n      id: index,\n      data: getAlertInfo(rule, currentInterval),\n    }))\n    .sort(\n      (alert1, alert2) => safeParseDurationstr(alert1.data.forDuration) - safeParseDurationstr(alert2.data.forDuration)\n    );\n\n  const columns: AlertsWithForTableColumnProps[] = useMemo(() => {\n    return [\n      {\n        id: 'alertName',\n        label: 'Alert',\n        renderCell: ({ data: { alertName } }) => {\n          return <>{alertName}</>;\n        },\n        size: '330px',\n      },\n      {\n        id: 'for',\n        label: 'For',\n        renderCell: ({ data: { forDuration } }) => {\n          return <>{forDuration}</>;\n        },\n        size: 0.5,\n      },\n      {\n        id: 'numberEvaluations',\n        label: '#Eval',\n        renderCell: ({ data: { evaluationsToFire: numberEvaluations } }) => {\n          if (unknownCurrentInterval) {\n            return <ForBadge message=\"#Evaluations not available.\" />;\n          } else {\n            if (!isValidEvaluation(currentInterval)) {\n              return <ForBadge message={'Invalid evaluation interval format'} error />;\n            }\n            if (numberEvaluations === 0) {\n              return (\n                <ForBadge message=\"Invalid 'For' value: it should be greater or equal to evaluation interval.\" error />\n              );\n            } else {\n              return <>{numberEvaluations}</>;\n            }\n          }\n        },\n        size: 0.4,\n      },\n    ];\n  }, [currentInterval, unknownCurrentInterval]);\n\n  return (\n    <div className={styles.tableWrapper}>\n      <DynamicTable items={rows} cols={columns} pagination={{ itemsPerPage: ITEMS_PER_PAGE }} />\n    </div>\n  );\n};\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport const evaluateEveryValidationOptions = (rules: RulerRuleDTO[]): RegisterOptions => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (evaluateEvery: string) => {\n    try {\n      const duration = parsePrometheusDuration(evaluateEvery);\n\n      if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (rulesInSameGroupHaveInvalidFor(rules, evaluateEvery).length === 0) {\n        return true;\n      } else {\n        return `Invalid evaluation interval. Evaluation interval should be smaller or equal to 'For' values for existing rules in this group.`;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nexport interface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: (saved?: boolean) => void;\n  intervalEditOnly?: boolean;\n  folderUrl?: string;\n  hideFolder?: boolean;\n}\n\nexport function EditCloudGroupModal(props: ModalProps): React.ReactElement {\n  const { namespace, group, onClose, intervalEditOnly } = props;\n\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n  const notifyApp = useAppNotification();\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n  const isGrafanaManagedGroup = rulesSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  const nameSpaceLabel = isGrafanaManagedGroup ? 'Folder' : 'Namespace';\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose(true);\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => (state.unifiedAlerting.updateLotexNamespaceAndGroup = initialAsyncRequestState));\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: rulesSourceName,\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  const formAPI = useForm<FormValues>({\n    mode: 'onBlur',\n    defaultValues,\n    shouldFocusError: true,\n  });\n  const {\n    handleSubmit,\n    register,\n    watch,\n    formState: { isDirty, errors },\n  } = formAPI;\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Correct the errors and retry.');\n  };\n\n  const rulesWithoutRecordingRules = compact(\n    group.rules.map((r) => r.rulerRule).filter((rule) => !isRecordingRulerRule(rule))\n  );\n  const hasSomeNoRecordingRules = rulesWithoutRecordingRules.length > 0;\n  const modalTitle =\n    intervalEditOnly || isGrafanaManagedGroup ? 'Edit evaluation group' : 'Edit namespace or evaluation group';\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={modalTitle} onDismiss={onClose} onClickBackdrop={onClose}>\n      <FormProvider {...formAPI}>\n        <form onSubmit={(e) => e.preventDefault()} key={JSON.stringify(defaultValues)}>\n          <>\n            {!props.hideFolder && (\n              <Stack gap={1} alignItems={'center'}>\n                <Field\n                  className={styles.formInput}\n                  label={\n                    <Label\n                      htmlFor=\"namespaceName\"\n                      description={\n                        !isGrafanaManagedGroup &&\n                        'Change the current namespace name. Moving groups between namespaces is not supported'\n                      }\n                    >\n                      {nameSpaceLabel}\n                    </Label>\n                  }\n                  invalid={!!errors.namespaceName}\n                  error={errors.namespaceName?.message}\n                >\n                  <Input\n                    id=\"namespaceName\"\n                    readOnly={intervalEditOnly || isGrafanaManagedGroup}\n                    {...register('namespaceName', {\n                      required: 'Namespace name is required.',\n                    })}\n                  />\n                </Field>\n                {isGrafanaManagedGroup && props.folderUrl && (\n                  <LinkButton\n                    href={props.folderUrl}\n                    title=\"Go to folder\"\n                    variant=\"secondary\"\n                    icon=\"folder-open\"\n                    target=\"_blank\"\n                  />\n                )}\n              </Stack>\n            )}\n            <Field\n              label={<Label htmlFor=\"groupName\">Evaluation group name</Label>}\n              invalid={!!errors.groupName}\n              error={errors.groupName?.message}\n            >\n              <Input\n                autoFocus={true}\n                id=\"groupName\"\n                readOnly={intervalEditOnly}\n                {...register('groupName', {\n                  required: 'Evaluation group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label={\n                <Label\n                  htmlFor=\"groupInterval\"\n                  description=\"How often is the rule evaluated. Applies to every rule within the group.\"\n                >\n                  <Stack gap={0.5}>Evaluation interval</Stack>\n                </Label>\n              }\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', evaluateEveryValidationOptions(rulesWithoutRecordingRules))}\n              />\n            </Field>\n\n            {checkEvaluationIntervalGlobalLimit(watch('groupInterval')).exceedsLimit && (\n              <EvaluationIntervalLimitExceeded />\n            )}\n\n            {!hasSomeNoRecordingRules && <div>This group does not contain alert rules.</div>}\n            {hasSomeNoRecordingRules && (\n              <>\n                <div>List of rules that belong to this group</div>\n                <div className={styles.evalRequiredLabel}>\n                  #Eval column represents the number of evaluations needed before alert starts firing.\n                </div>\n                <RulesForGroupTable rulesWithoutRecordingRules={rulesWithoutRecordingRules} />\n              </>\n            )}\n\n            <div className={styles.modalButtons}>\n              <Modal.ButtonRow>\n                <Button\n                  variant=\"secondary\"\n                  type=\"button\"\n                  disabled={loading}\n                  onClick={() => onClose(false)}\n                  fill=\"outline\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  disabled={!isDirty || loading}\n                  onClick={handleSubmit((values) => onSubmit(values), onInvalid)}\n                >\n                  {loading ? 'Saving...' : 'Save'}\n                </Button>\n              </Modal.ButtonRow>\n            </div>\n          </>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    max-width: 560px;\n  `,\n  modalButtons: css`\n    top: -24px;\n    position: relative;\n  `,\n  formInput: css`\n    flex: 1;\n  `,\n  tableWrapper: css`\n    margin-top: ${theme.spacing(2)};\n    margin-bottom: ${theme.spacing(2)};\n    height: 100%;\n  `,\n  evalRequiredLabel: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n","import { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { DataQuery } from '@grafana/schema';\n\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","styles","getStyles","selectedAlertmanager","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","Select","value","o","theme","NoAlertManagersAvailable","Alert","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","children","pageId","pageNav","actions","isLoading","Page","AlertmanagerPageWrapper","accessType","props","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match","SlashesWarning","onClick","Stack","Tooltip","Icon","containsSlashes","str","RuleFolderPicker","folderWarning","folderName","customAdd","OldFolderPicker","MAX_GROUP_RESULTS","useFolderGroupOptions","folderTitle","enableProvisionedGroups","dispatch","groupfoldersForGrafana","useUnifiedAlertingSelector","state","useCombinedRuleNamespaces","f","group","isProvisioned","isProvisionedGroup","sortByLabel","rule","a","b","findGroupMatchingLabel","query","FolderAndGroup","errors","watch","setValue","control","folder","groupOptions","loading","isCreatingFolder","setIsCreatingFolder","isCreatingEvaluationGroup","setIsCreatingEvaluationGroup","onOpenFolderCreationModal","onOpenEvaluationGroupCreationModal","handleFolderCreation","resetGroup","handleEvalGroupCreation","groupName","evaluationInterval","getOptions","results","debouncedSearch","defaultGroupValue","Field","Label","InputControl","ref","field","title","uid","Box","Text","Button","FolderCreationModal","fieldState","option","Provisioning","group_","EvaluationGroupCreationModal","onClose","onCreate","setTitle","onSubmit","newFolder","error","Modal","Input","e","getValues","evaluateEveryId","groupRules","g","onCancel","formAPI","register","handleSubmit","formState","GrafanaAlertStatePicker","includeNoData","includeError","opts","opt","MIN_TIME_RANGE_STEP_S","forValidationOptions","evaluateEvery","millisFor","millisEvery","useIsNewGroup","groupInList","FolderGroupAndEvaluationInterval","setEvaluateEvery","isEditingGroup","setIsEditingGroup","existingNamespace","ns","existingGroup","isNewGroup","closeEditGroupModal","saved","onOpenEditGroupModal","editGroupDisabled","emptyNamespace","emptyGroup","IconButton","ForInput","evaluateForId","getDescription","docsLink","NeedHelpInfo","GrafanaEvaluationBehavior","existing","showErrorHandling","setShowErrorHandling","isPaused","RuleEditorSection","Switch","CollapseToggle","collapsed","onChange","createDagFromQueries","_createDagFromQueries","previous","next","fingerPrintQueries","queries","graph","nodes","source","parseRefsFromMathExpression","target","input","r1","r2","m1","m","m2","getOriginOfRefId","_getOriginsOfRefId","refId","fingerprintGraph","node","origins","findChildNode","inputEdges","edge","origin","name","n","outputEdges","type","queriesWithUpdatedReferences","previousRefId","newRefId","isMathExpression","isReduceExpression","isResampleExpression","isClassicExpression","isThresholdExpression","updateMathExpressionRefs","isReferencing","conditions","condition","param","expression","oldExpression","newExpression","refIdExists","checkForPathSeparator","errorFromCurrentCondition","data","isTimeSeriesResults","errorFromPreviewData","warningFromSeries","series","warning","notice","getThresholdsForQueries","thresholds","SUPPORTED_EXPRESSION_TYPES","hasRangeThreshold","isRangeCondition","threshold","isRangeThreshold","originRefIDs","originQuery","originRefID","hasValidOrigin","appendSingleThreshold","appendRangeThreshold","err","config","values","step","getStatusMessage","genericErrorMessage","translateRouteParamToRuleType","findRenamedDataQueryReferences","previousQueries","updatedQueries","updatedDataQueries","previousDataQueries","oldRefId","EvaluationIntervalLimitExceeded","ITEMS_PER_PAGE","ForBadge","message","Badge","isValidEvaluation","evaluation","duration","RulesForGroupTable","rulesWithoutRecordingRules","currentInterval","unknownCurrentInterval","rows","index","alert1","alert2","columns","alertName","forDuration","numberEvaluations","DynamicTable","evaluateEveryValidationOptions","rules","EditCloudGroupModal","namespace","intervalEditOnly","dispatched","notifyApp","defaultValues","rulesSourceName","isGrafanaManagedGroup","nameSpaceLabel","useCleanup","isDirty","onInvalid","r","hasSomeNoRecordingRules","modalTitle","useRulesAccess","isExpressionQuery","dataQuery"],"sourceRoot":""}