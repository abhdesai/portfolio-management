{"version":3,"file":"AdminAuthentication.573839d30b117b1d961e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/auth-config/components/ConfigureAuthCTA.tsx","webpack://grafana/./public/app/features/auth-config/constants.ts","webpack://grafana/./public/app/features/auth-config/utils.ts","webpack://grafana/./public/app/features/auth-config/components/ProviderCard.tsx","webpack://grafana/./public/app/features/auth-config/state/actions.ts","webpack://grafana/./public/app/features/auth-config/AuthConfigPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, TextLink, useStyles2 } from '@grafana/ui';\n\nexport interface Props {}\n\nconst ConfigureAuthCTA: React.FunctionComponent<Props> = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.container}>\n      <Stack gap={1} alignItems={'center'}>\n        <Icon name={'cog'} />\n        <Text>Configuration required</Text>\n      </Stack>\n      <Text variant={'bodySmall'} color={'secondary'}>\n        You have no authentication configuration created at the moment.\n      </Text>\n      <TextLink href={'https://grafana.com/docs/grafana/latest/auth/overview/'} external>\n        Refer to the documentation on how to configure authentication\n      </TextLink>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      width: 'max-content',\n      margin: theme.spacing(3, 'auto'),\n    }),\n  };\n};\n\nexport default ConfigureAuthCTA;\n","export const BASE_PATH = 'admin/authentication/';\n","import { BASE_PATH } from './constants';\nimport { AuthProviderInfo } from './types';\n\nexport function getProviderUrl(provider: AuthProviderInfo) {\n  return BASE_PATH + (provider.configPath || provider.id);\n}\n","import React from 'react';\n\nimport { IconName, isIconName } from '@grafana/data';\nimport { Badge, Card, Icon } from '@grafana/ui';\n\nimport { getProviderUrl } from '../utils';\n\ntype Props = {\n  providerId: string;\n  displayName: string;\n  enabled: boolean;\n  configPath?: string;\n  authType?: string;\n  onClick?: () => void;\n};\n\n// TODO Remove when this is available from API\nconst UIMap: Record<string, [IconName, string]> = {\n  github: ['github', 'GitHub'],\n  gitlab: ['gitlab', 'GitLab'],\n  google: ['google', 'Google'],\n  generic_oauth: ['lock', 'Generic OAuth'],\n  grafana_com: ['grafana', 'Grafana.com'],\n  azuread: ['microsoft', 'Azure AD'],\n  okta: ['okta', 'Okta'],\n};\n\nexport function ProviderCard({ providerId, enabled, configPath, authType, onClick }: Props) {\n  //@ts-expect-error\n  const url = getProviderUrl({ configPath, id: providerId });\n  const [iconName, displayName] = UIMap[providerId] || ['lock', providerId.toUpperCase()];\n  return (\n    <Card href={url} onClick={onClick}>\n      <Card.Heading>{displayName}</Card.Heading>\n      <Card.Meta>{authType}</Card.Meta>\n      {isIconName(iconName) && (\n        <Card.Figure>\n          <Icon name={iconName} size={'xxxl'} />\n        </Card.Figure>\n      )}\n      <Card.Actions>\n        <Badge text={enabled ? 'Enabled' : 'Not enabled'} color={enabled ? 'green' : 'blue'} />\n      </Card.Actions>\n    </Card>\n  );\n}\n","import { lastValueFrom } from 'rxjs';\n\nimport { config, getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Settings, ThunkResult, UpdateSettingsQuery } from 'app/types';\n\nimport { getAuthProviderStatus, getRegisteredAuthProviders, SSOProvider } from '..';\nimport { AuthProviderStatus, SettingsError } from '../types';\n\nimport {\n  loadingBegin,\n  loadingEnd,\n  providersLoaded,\n  providerStatusesLoaded,\n  resetError,\n  setError,\n  settingsUpdated,\n} from './reducers';\n\nexport function loadSettings(): ThunkResult<Promise<Settings>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsRead)) {\n      dispatch(loadingBegin());\n      dispatch(loadProviders());\n      const result = await getBackendSrv().get('/api/admin/settings');\n      dispatch(settingsUpdated(result));\n      await dispatch(loadProviderStatuses());\n      dispatch(loadingEnd());\n      return result;\n    }\n  };\n}\n\nexport function loadProviders(): ThunkResult<Promise<SSOProvider[]>> {\n  return async (dispatch) => {\n    if (!config.featureToggles.ssoSettingsApi) {\n      return [];\n    }\n    const result = await getBackendSrv().get('/api/v1/sso-settings');\n    dispatch(providersLoaded(result));\n    return result;\n  };\n}\n\nexport function loadProviderStatuses(): ThunkResult<void> {\n  return async (dispatch) => {\n    const registeredProviders = getRegisteredAuthProviders();\n    const providerStatuses: Record<string, AuthProviderStatus> = {};\n    const getStatusPromises: Array<Promise<AuthProviderStatus>> = [];\n    for (const provider of registeredProviders) {\n      getStatusPromises.push(getAuthProviderStatus(provider.id));\n    }\n    const statuses = await Promise.all(getStatusPromises);\n    for (let i = 0; i < registeredProviders.length; i++) {\n      const provider = registeredProviders[i];\n      providerStatuses[provider.id] = statuses[i];\n    }\n    dispatch(providerStatusesLoaded(providerStatuses));\n  };\n}\n\nexport function saveSettings(data: UpdateSettingsQuery): ThunkResult<Promise<boolean>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsWrite)) {\n      try {\n        await lastValueFrom(\n          getBackendSrv().fetch({\n            url: '/api/admin/settings',\n            method: 'PUT',\n            data,\n            showSuccessAlert: false,\n            showErrorAlert: false,\n          })\n        );\n        dispatch(resetError());\n        return true;\n      } catch (error) {\n        console.log(error);\n        if (isFetchError(error)) {\n          error.isHandled = true;\n          const updateErr: SettingsError = {\n            message: error.data?.message,\n            errors: error.data?.errors,\n          };\n          dispatch(setError(updateErr));\n          return false;\n        }\n      }\n    }\n    return false;\n  };\n}\n","import React, { JSX, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Grid, TextLink } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport ConfigureAuthCTA from './components/ConfigureAuthCTA';\nimport { ProviderCard } from './components/ProviderCard';\nimport { loadSettings } from './state/actions';\n\nimport { getRegisteredAuthProviders } from './index';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  const { isLoading, providerStatuses, providers } = state.authConfig;\n  return {\n    isLoading,\n    providerStatuses,\n    providers,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadSettings,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const AuthConfigPageUnconnected = ({\n  providerStatuses,\n  isLoading,\n  loadSettings,\n  providers,\n}: Props): JSX.Element => {\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  const authProviders = getRegisteredAuthProviders();\n  const availableProviders = authProviders.filter((p) => !providerStatuses[p.id]?.hide);\n  const onProviderCardClick = (providerType: string) => {\n    reportInteraction('authentication_ui_provider_clicked', { provider: providerType });\n  };\n\n  const providerList = availableProviders.length\n    ? [\n        ...availableProviders.map((p) => ({\n          provider: p.id,\n          settings: { ...providerStatuses[p.id], configPath: p.configPath, type: p.type },\n        })),\n        ...providers,\n      ]\n    : providers;\n  return (\n    <Page\n      navId=\"authentication\"\n      subTitle={\n        <>\n          Manage your auth settings and configure single sign-on. Find out more in our{' '}\n          <TextLink href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication\">\n            documentation\n          </TextLink>\n          .\n        </>\n      }\n    >\n      <Page.Contents isLoading={isLoading}>\n        {!providerList.length ? (\n          <ConfigureAuthCTA />\n        ) : (\n          <Grid gap={3} minColumnWidth={34}>\n            {providerList.map(({ provider, settings }) => (\n              <ProviderCard\n                key={provider}\n                authType={settings.type || 'OAuth'}\n                providerId={provider}\n                displayName={provider}\n                enabled={settings.enabled}\n                onClick={() => onProviderCardClick(provider)}\n                configPath={settings.configPath}\n              />\n            ))}\n          </Grid>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AuthConfigPageUnconnected);\n"],"names":["ConfigureAuthCTA","styles","getStyles","Stack","Icon","Text","TextLink","theme","BASE_PATH","getProviderUrl","provider","UIMap","ProviderCard","providerId","enabled","configPath","authType","onClick","url","iconName","displayName","Card","Badge","loadSettings","dispatch","loadProviders","result","loadProviderStatuses","config","registeredProviders","providerStatuses","getStatusPromises","statuses","saveSettings","data","error","updateErr","mapStateToProps","state","isLoading","providers","mapDispatchToProps","connector","AuthConfigPageUnconnected","availableProviders","p","onProviderCardClick","providerType","providerList","Page","Grid","settings"],"sourceRoot":""}