{"version":3,"file":"NotificationsListPage.7a269709bdda796e2224.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/NotificationsListPage.tsx","webpack://grafana/./public/app/features/alerting/unified/Receivers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertManagerPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx"],"sourcesContent":["import React, { useState, FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { HorizontalGroup, Button, LinkButton } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { appEvents } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AlertNotification } from 'app/types/alerting';\n\nimport { ShowConfirmModalEvent } from '../../types/events';\n\nconst NotificationsListPage: FC = () => {\n  const navModel = useNavModel('channels');\n\n  const [notifications, setNotifications] = useState<AlertNotification[]>([]);\n\n  const getNotifications = async () => {\n    return await getBackendSrv().get(`/api/alert-notifications`);\n  };\n\n  const [state, fetchNotifications] = useAsyncFn(getNotifications);\n  useEffect(() => {\n    fetchNotifications().then((res) => {\n      setNotifications(res);\n    });\n  }, [fetchNotifications]);\n\n  const deleteNotification = (id: number) => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: 'Do you want to delete this notification channel?',\n        text2: `Deleting this notification channel will not delete from alerts any references to it`,\n        icon: 'trash-alt',\n        confirmText: 'Delete',\n        yesText: 'Delete',\n        onConfirm: async () => {\n          deleteNotificationConfirmed(id);\n        },\n      })\n    );\n  };\n\n  const deleteNotificationConfirmed = async (id: number) => {\n    await getBackendSrv().delete(`/api/alert-notifications/${id}`);\n    const notifications = await fetchNotifications();\n    setNotifications(notifications);\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {state.error && <p>{state.error.message}</p>}\n        {!!notifications.length && (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"page-action-bar__spacer\" />\n              <LinkButton icon=\"channel-add\" href=\"alerting/notification/new\">\n                New channel\n              </LinkButton>\n            </div>\n            <table className=\"filter-table filter-table--hover\">\n              <thead>\n                <tr>\n                  <th style={{ minWidth: '200px' }}>\n                    <strong>Name</strong>\n                  </th>\n                  <th style={{ minWidth: '100px' }}>Type</th>\n                  <th style={{ width: '1%' }}></th>\n                </tr>\n              </thead>\n              <tbody>\n                {notifications.map((notification) => (\n                  <tr key={notification.id}>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.name}</a>\n                    </td>\n                    <td className=\"link-td\">\n                      <a href={`alerting/notification/${notification.id}/edit`}>{notification.type}</a>\n                    </td>\n                    <td className=\"text-right\">\n                      <HorizontalGroup justify=\"flex-end\">\n                        {notification.isDefault && (\n                          <Button disabled variant=\"secondary\" size=\"sm\">\n                            default\n                          </Button>\n                        )}\n                        <Button\n                          variant=\"destructive\"\n                          icon=\"times\"\n                          size=\"sm\"\n                          onClick={() => {\n                            deleteNotification(notification.id);\n                          }}\n                        />\n                      </HorizontalGroup>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </>\n        )}\n\n        {!(notifications.length || state.loading) && (\n          <EmptyListCTA\n            title=\"There are no notification channels defined yet\"\n            buttonIcon=\"channel-add\"\n            buttonLink=\"alerting/notification/new\"\n            buttonTitle=\"Add channel\"\n            proTip=\"You can include images in your alert notifications.\"\n            proTipLink=\"http://docs.grafana.org/alerting/notifications/\"\n            proTipLinkTitle=\"Learn more\"\n            proTipTarget=\"_blank\"\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default NotificationsListPage;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { withErrorBoundary } from '@grafana/ui';\nconst ContactPointsV2 = SafeDynamicImport(() => import('./components/contact-points/ContactPoints'));\nconst EditContactPoint = SafeDynamicImport(() => import('./components/contact-points/EditContactPoint'));\nconst NewContactPoint = SafeDynamicImport(() => import('./components/contact-points/NewContactPoint'));\nconst EditMessageTemplate = SafeDynamicImport(() => import('./components/contact-points/EditMessageTemplate'));\nconst NewMessageTemplate = SafeDynamicImport(() => import('./components/contact-points/NewMessageTemplate'));\nconst GlobalConfig = SafeDynamicImport(() => import('./components/contact-points/components/GlobalConfig'));\nconst DuplicateMessageTemplate = SafeDynamicImport(\n  () => import('./components/contact-points/DuplicateMessageTemplate')\n);\nimport { SafeDynamicImport } from 'app/core/components/DynamicImports/SafeDynamicImport';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\n\nconst ContactPoints = (_props: GrafanaRouteComponentProps): JSX.Element => (\n  <AlertmanagerPageWrapper pageId=\"receivers\" accessType=\"notification\">\n    <Switch>\n      <Route exact={true} path=\"/alerting/notifications\" component={ContactPointsV2} />\n      <Route exact={true} path=\"/alerting/notifications/receivers/new\" component={NewContactPoint} />\n      <Route exact={true} path=\"/alerting/notifications/receivers/:name/edit\" component={EditContactPoint} />\n      <Route exact={true} path=\"/alerting/notifications/templates/:name/edit\" component={EditMessageTemplate} />\n      <Route exact={true} path=\"/alerting/notifications/templates/new\" component={NewMessageTemplate} />\n      <Route\n        exact={true}\n        path=\"/alerting/notifications/templates/:name/duplicate\"\n        component={DuplicateMessageTemplate}\n      />\n      <Route exact={true} path=\"/alerting/notifications/global-config\" component={GlobalConfig} />\n    </Switch>\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(ContactPoints, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { InlineField, Select, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface Props {\n  disabled?: boolean;\n}\n\nfunction getAlertManagerLabel(alertManager: AlertManagerDataSource) {\n  return alertManager.name === GRAFANA_RULES_SOURCE_NAME ? 'Grafana' : alertManager.name.slice(0, 37);\n}\n\nexport const AlertManagerPicker = ({ disabled = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager, availableAlertManagers, setSelectedAlertmanager } = useAlertmanager();\n\n  const options: Array<SelectableValue<string>> = useMemo(() => {\n    return availableAlertManagers.map((ds) => ({\n      label: getAlertManagerLabel(ds),\n      value: ds.name,\n      imgUrl: ds.imgUrl,\n      meta: ds.meta,\n    }));\n  }, [availableAlertManagers]);\n\n  return (\n    <InlineField\n      className={styles.field}\n      label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n      disabled={disabled || options.length === 1}\n      data-testid=\"alertmanager-picker\"\n    >\n      <Select\n        aria-label={disabled ? 'Alertmanager' : 'Choose Alertmanager'}\n        width={29}\n        className=\"ds-picker select-container\"\n        backspaceRemovesValue={false}\n        onChange={(value) => {\n          if (value?.value) {\n            setSelectedAlertmanager(value.value);\n          }\n        }}\n        options={options}\n        maxMenuHeight={500}\n        noOptionsMessage=\"No datasources found\"\n        value={selectedAlertmanager}\n        getOptionLabel={(o) => o.label}\n      />\n    </InlineField>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { AlertManagerDataSource } from '../utils/datasource';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found.\" severity=\"warning\">\n    The selected Alertmanager no longer exists or you may not have permission to access it. You can select a different\n    Alertmanager from the dropdown.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return <div>{hasOtherAMs ? <OtherAlertManagersAvailable /> : <NoAlertManagersAvailable />}</div>;\n};\n","import React, { PropsWithChildren } from 'react';\nimport { useLocation } from 'react-use';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { AlertmanagerProvider, useAlertmanager } from '../state/AlertmanagerContext';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\nimport { NoAlertManagerWarning } from './NoAlertManagerWarning';\n\n/**\n * This is the main alerting page wrapper, used by the alertmanager page wrapper and the alert rules list view\n */\ninterface AlertingPageWrapperProps extends PropsWithChildren {\n  pageId?: string;\n  isLoading?: boolean;\n  pageNav?: NavModelItem;\n  actions?: React.ReactNode;\n}\nexport const AlertingPageWrapper = ({ children, pageId, pageNav, actions, isLoading }: AlertingPageWrapperProps) => {\n  return (\n    <Page pageNav={pageNav} navId={pageId} actions={actions}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n\n/**\n * This wrapper is for pages that use the Alertmanager API\n */\ninterface AlertmanagerPageWrapperProps extends AlertingPageWrapperProps {\n  accessType: 'instance' | 'notification';\n}\nexport const AlertmanagerPageWrapper = ({ children, accessType, ...props }: AlertmanagerPageWrapperProps) => {\n  const disableAlertmanager = useIsDisabledAlertmanagerSelection();\n\n  return (\n    <AlertmanagerProvider accessType={accessType}>\n      <AlertingPageWrapper {...props} actions={<AlertManagerPicker disabled={disableAlertmanager} />}>\n        <AlertManagerPagePermissionsCheck>{children}</AlertManagerPagePermissionsCheck>\n      </AlertingPageWrapper>\n    </AlertmanagerProvider>\n  );\n};\n\n/**\n * This function tells us when we want to disable the alertmanager picker\n * It's not great...\n */\nfunction useIsDisabledAlertmanagerSelection() {\n  const location = useLocation();\n  const disabledPathSegment = ['/edit', '/new'];\n\n  return disabledPathSegment.some((match) => location?.pathname?.includes(match));\n}\n\n/**\n * This component will render an error message if the user doesn't have sufficient permissions or if the requested\n * alertmanager doesn't exist\n */\nconst AlertManagerPagePermissionsCheck = ({ children }: PropsWithChildren) => {\n  const { availableAlertManagers, selectedAlertmanager } = useAlertmanager();\n\n  if (!selectedAlertmanager) {\n    return <NoAlertManagerWarning availableAlertManagers={availableAlertManagers} />;\n  }\n\n  return <>{children}</>;\n};\n"],"names":["navModel","notifications","setNotifications","getNotifications","state","fetchNotifications","res","deleteNotification","id","deleteNotificationConfirmed","notification","ContactPointsV2","EditContactPoint","NewContactPoint","EditMessageTemplate","NewMessageTemplate","GlobalConfig","DuplicateMessageTemplate","ContactPoints","_props","getAlertManagerLabel","alertManager","AlertManagerPicker","disabled","styles","getStyles","selectedAlertmanager","availableAlertManagers","setSelectedAlertmanager","options","ds","InlineField","Select","value","o","theme","NoAlertManagersAvailable","Alert","OtherAlertManagersAvailable","NoAlertManagerWarning","hasOtherAMs","AlertingPageWrapper","children","pageId","pageNav","actions","isLoading","Page","AlertmanagerPageWrapper","accessType","props","disableAlertmanager","useIsDisabledAlertmanagerSelection","AlertManagerPagePermissionsCheck","location","useLocation","match"],"sourceRoot":""}