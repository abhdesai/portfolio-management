{"version":3,"file":"ServerStats.23a58b4c31fbba232270.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/ServerStatsCard.tsx","webpack://grafana/./public/app/features/admin/state/apis.tsx","webpack://grafana/./public/app/features/admin/ServerStats.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CardContainer, Stack, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  content: Array<Record<string, string | number | undefined>>;\n  isLoading?: boolean;\n  footer?: JSX.Element | boolean;\n}\n\nexport const ServerStatsCard = ({ content, footer, isLoading }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <CardContainer className={styles.container} disableHover>\n      {content.map((item, index) => (\n        <Stack key={index} justifyContent=\"space-between\" alignItems=\"center\">\n          <span>{item.name}</span>\n          {isLoading ? <Skeleton width={60} /> : <span>{item.value}</span>}\n        </Stack>\n      ))}\n      {footer && <div>{footer}</div>}\n    </CardContainer>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n      padding: theme.spacing(2),\n    }),\n  };\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\ninterface AnonServerStat {\n  activeDevices?: number;\n}\n\nexport interface ServerStat extends AnonServerStat {\n  activeAdmins: number;\n  activeEditors: number;\n  activeSessions: number;\n  activeUsers: number;\n  activeViewers: number;\n  admins: number;\n  alerts: number;\n  dashboards: number;\n  datasources: number;\n  editors: number;\n  orgs: number;\n  playlists: number;\n  snapshots: number;\n  stars: number;\n  tags: number;\n  users: number;\n  viewers: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat | null> => {\n  return getBackendSrv()\n    .get('api/admin/stats')\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { AccessControlAction } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\n\nimport { ServerStatsCard } from './ServerStatsCard';\nimport { getServerStats, ServerStat } from './state/apis';\n\nexport const ServerStats = () => {\n  const [stats, setStats] = useState<ServerStat | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesRead);\n  const hasAccessToAdminUsers = contextSrv.hasPermission(AccessControlAction.UsersRead);\n\n  useEffect(() => {\n    if (contextSrv.hasPermission(AccessControlAction.ActionServerStatsRead)) {\n      getServerStats().then((stats) => {\n        setStats(stats);\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  if (!contextSrv.hasPermission(AccessControlAction.ActionServerStatsRead)) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2 className={styles.title}>Instance statistics</h2>\n      {!isLoading && !stats ? (\n        <p className={styles.notFound}>No stats found.</p>\n      ) : (\n        <div className={styles.row}>\n          <ServerStatsCard\n            isLoading={isLoading}\n            content={[\n              { name: 'Dashboards (starred)', value: `${stats?.dashboards} (${stats?.stars})` },\n              { name: 'Tags', value: stats?.tags },\n              { name: 'Playlists', value: stats?.playlists },\n              { name: 'Snapshots', value: stats?.snapshots },\n            ]}\n            footer={\n              <LinkButton href={'/dashboards'} variant={'secondary'}>\n                Manage dashboards\n              </LinkButton>\n            }\n          />\n\n          <div className={styles.doubleRow}>\n            <ServerStatsCard\n              isLoading={isLoading}\n              content={[{ name: 'Data sources', value: stats?.datasources }]}\n              footer={\n                hasAccessToDataSources && (\n                  <LinkButton href={'/datasources'} variant={'secondary'}>\n                    Manage data sources\n                  </LinkButton>\n                )\n              }\n            />\n            <ServerStatsCard\n              isLoading={isLoading}\n              content={[{ name: 'Alerts', value: stats?.alerts }]}\n              footer={\n                <LinkButton href={'/alerting/list'} variant={'secondary'}>\n                  Alerts\n                </LinkButton>\n              }\n            />\n          </div>\n          <ServerStatsCard\n            isLoading={isLoading}\n            content={[\n              { name: 'Organisations', value: stats?.orgs },\n              { name: 'Users total', value: stats?.users },\n              { name: 'Active users in last 30 days', value: stats?.activeUsers },\n              ...(config.featureToggles.displayAnonymousStats && stats?.activeDevices\n                ? [\n                    { name: 'Active anonymous devices in last 30 days', value: stats?.activeDevices },\n                    { name: 'Active anonymous users in last 30 days', value: Math.floor(stats?.activeDevices / 3) },\n                  ]\n                : []),\n              { name: 'Active sessions', value: stats?.activeSessions },\n            ]}\n            footer={\n              hasAccessToAdminUsers && (\n                <LinkButton href={'/admin/users'} variant={'secondary'}>\n                  Manage users\n                </LinkButton>\n              )\n            }\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css({\n      marginBottom: theme.spacing(4),\n    }),\n    row: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      width: '100%',\n\n      '& > div:not(:last-of-type)': {\n        marginRight: theme.spacing(2),\n      },\n\n      '& > div': {\n        width: '33.3%',\n      },\n    }),\n    doubleRow: css({\n      display: 'flex',\n      flexDirection: 'column',\n\n      '& > div:first-of-type': {\n        marginBottom: theme.spacing(2),\n      },\n    }),\n    notFound: css({\n      fontSize: theme.typography.h6.fontSize,\n      textAlign: 'center',\n      height: '290px',\n    }),\n  };\n};\n"],"names":["ServerStatsCard","content","footer","isLoading","styles","getStyles","CardContainer","item","index","Stack","theme","getServerStats","err","ServerStats","stats","setStats","setIsLoading","hasAccessToDataSources","hasAccessToAdminUsers","config"],"sourceRoot":""}