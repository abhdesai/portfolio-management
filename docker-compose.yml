version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: portfolio-postgres
    environment:
      POSTGRES_DB: portfolio_management
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_management"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portfolio Management Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: portfolio-server
    environment:
      NODE_ENV: production
      PORT: 6050
      HTTP: true
      HTTPS: false
      DATABASE_URL: postgresql://portfolio_user:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/portfolio_management
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-key-here}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@yourdomain.com}
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN:-http://localhost:6060}
    ports:
      - "6050:6050"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - server_uploads:/app/uploads
      - server_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:6050/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Portfolio Management Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: portfolio-client
    environment:
      REACT_APP_API_URL: http://localhost:6050
      REACT_APP_ENVIRONMENT: production
    ports:
      - "6060:80"
    depends_on:
      - server
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: portfolio-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - server
      - client
    restart: unless-stopped

volumes:
  postgres_data:
  server_uploads:
  server_logs: 